== Usage ==

// signless:
$form = new SomeForm();
$form->import($request->getPost());
if ($form->hasErrors()) {
	// import failed
}
else {
	// all ok
}
return new View("auth", array('form' => $form));



// signed:
$form = new SomeForm(..., $signed = true);
try {
	$form->handle($request);
	if (!$form->hasErrors())
		return "/";
}
catch (FormSubmitException $e) {
	// not matched or invalidated
	$form->sign($request);
}
return new View("auth", array('form' => $form));


== Shortcuts ==

function __construct(Photo $photo, HttpUrl $url)
{
	parent::__construct(__CLASS__, $url);
	$this->addControl(FormControl::string("name"));
	$this->addControl(FormControl::email("email"));
	$this->addControl(FormControl::password("password"));
	$this->addControl(FormControl::string("website", false));
	$this->addControl(FormControl::textarea("about"));
	$this->addControl(FormControl::image("image"));
	$this->addControl(FormControl::file("metafile"));
	$this->addControl(FormControl::fileSet("images"));
	$this->addControl(FormControl::checkbox("is_private"));
	$this->addControl(FormControl::checkboxSet("licence", array(0 => 'free', 1 => 'pay'), array(0, 1)));
	$this->addControl(FormControl::select("quality", array(0 => 'low', 1 => 'normal', 2 => 'high'), 0));
	$this->addControl(FormControl::selectMultiple("license", array(0 => 'free', 1 => 'pay'), array(0, 1)));
	$this->addControl(FormControl::radioGroup("priority", array(0 => 'low', 1 => 'normal', 2 => 'high'), 0));

	$this->addButton("save", "Save", array($this, 'onSave'), false);
	$this->addButton("delete", "Delete", array($this, 'onDelete'), true);
}